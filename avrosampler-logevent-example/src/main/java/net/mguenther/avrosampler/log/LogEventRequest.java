/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package net.mguenther.avrosampler.log;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogEventRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5748911139508729361L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogEventRequest\",\"namespace\":\"net.mguenther.avrosampler.log\",\"fields\":[{\"name\":\"clientId\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Identifiziert das übermittelnde System\"},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"LogEvent\",\"doc\":\"Beschreibt ein Systemereignis.\",\"fields\":[{\"name\":\"code\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Eindeutiger Bezeichner für das Systemereignis.\",\"order\":\"ignore\"},{\"name\":\"description\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null,\"order\":\"ignore\"},{\"name\":\"timestamp\",\"type\":\"long\",\"order\":\"descending\"},{\"name\":\"severity\",\"type\":{\"type\":\"enum\",\"name\":\"Severity\",\"symbols\":[\"INFO\",\"WARN\",\"ERROR\"]},\"default\":\"INFO\",\"order\":\"ignore\"}]},\"doc\":\"Log-Daten vom übermittelnden System\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Identifiziert das übermittelnde System */
  @Deprecated public java.lang.String clientId;
  /** Log-Daten vom übermittelnden System */
  @Deprecated public net.mguenther.avrosampler.log.LogEvent data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogEventRequest() {}

  /**
   * All-args constructor.
   * @param clientId Identifiziert das übermittelnde System
   * @param data Log-Daten vom übermittelnden System
   */
  public LogEventRequest(java.lang.String clientId, net.mguenther.avrosampler.log.LogEvent data) {
    this.clientId = clientId;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return clientId;
    case 1: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: clientId = (java.lang.String)value$; break;
    case 1: data = (net.mguenther.avrosampler.log.LogEvent)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'clientId' field.
   * @return Identifiziert das übermittelnde System
   */
  public java.lang.String getClientId() {
    return clientId;
  }

  /**
   * Sets the value of the 'clientId' field.
   * Identifiziert das übermittelnde System
   * @param value the value to set.
   */
  public void setClientId(java.lang.String value) {
    this.clientId = value;
  }

  /**
   * Gets the value of the 'data' field.
   * @return Log-Daten vom übermittelnden System
   */
  public net.mguenther.avrosampler.log.LogEvent getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * Log-Daten vom übermittelnden System
   * @param value the value to set.
   */
  public void setData(net.mguenther.avrosampler.log.LogEvent value) {
    this.data = value;
  }

  /**
   * Creates a new LogEventRequest RecordBuilder.
   * @return A new LogEventRequest RecordBuilder
   */
  public static net.mguenther.avrosampler.log.LogEventRequest.Builder newBuilder() {
    return new net.mguenther.avrosampler.log.LogEventRequest.Builder();
  }

  /**
   * Creates a new LogEventRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogEventRequest RecordBuilder
   */
  public static net.mguenther.avrosampler.log.LogEventRequest.Builder newBuilder(net.mguenther.avrosampler.log.LogEventRequest.Builder other) {
    return new net.mguenther.avrosampler.log.LogEventRequest.Builder(other);
  }

  /**
   * Creates a new LogEventRequest RecordBuilder by copying an existing LogEventRequest instance.
   * @param other The existing instance to copy.
   * @return A new LogEventRequest RecordBuilder
   */
  public static net.mguenther.avrosampler.log.LogEventRequest.Builder newBuilder(net.mguenther.avrosampler.log.LogEventRequest other) {
    return new net.mguenther.avrosampler.log.LogEventRequest.Builder(other);
  }

  /**
   * RecordBuilder for LogEventRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogEventRequest>
    implements org.apache.avro.data.RecordBuilder<LogEventRequest> {

    /** Identifiziert das übermittelnde System */
    private java.lang.String clientId;
    /** Log-Daten vom übermittelnden System */
    private net.mguenther.avrosampler.log.LogEvent data;
    private net.mguenther.avrosampler.log.LogEvent.Builder dataBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(net.mguenther.avrosampler.log.LogEventRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      if (other.hasDataBuilder()) {
        this.dataBuilder = net.mguenther.avrosampler.log.LogEvent.newBuilder(other.getDataBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing LogEventRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(net.mguenther.avrosampler.log.LogEventRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.clientId)) {
        this.clientId = data().deepCopy(fields()[0].schema(), other.clientId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.data)) {
        this.data = data().deepCopy(fields()[1].schema(), other.data);
        fieldSetFlags()[1] = true;
      }
      this.dataBuilder = null;
    }

    /**
      * Gets the value of the 'clientId' field.
      * Identifiziert das übermittelnde System
      * @return The value.
      */
    public java.lang.String getClientId() {
      return clientId;
    }

    /**
      * Sets the value of the 'clientId' field.
      * Identifiziert das übermittelnde System
      * @param value The value of 'clientId'.
      * @return This builder.
      */
    public net.mguenther.avrosampler.log.LogEventRequest.Builder setClientId(java.lang.String value) {
      validate(fields()[0], value);
      this.clientId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'clientId' field has been set.
      * Identifiziert das übermittelnde System
      * @return True if the 'clientId' field has been set, false otherwise.
      */
    public boolean hasClientId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'clientId' field.
      * Identifiziert das übermittelnde System
      * @return This builder.
      */
    public net.mguenther.avrosampler.log.LogEventRequest.Builder clearClientId() {
      clientId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'data' field.
      * Log-Daten vom übermittelnden System
      * @return The value.
      */
    public net.mguenther.avrosampler.log.LogEvent getData() {
      return data;
    }

    /**
      * Sets the value of the 'data' field.
      * Log-Daten vom übermittelnden System
      * @param value The value of 'data'.
      * @return This builder.
      */
    public net.mguenther.avrosampler.log.LogEventRequest.Builder setData(net.mguenther.avrosampler.log.LogEvent value) {
      validate(fields()[1], value);
      this.dataBuilder = null;
      this.data = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'data' field has been set.
      * Log-Daten vom übermittelnden System
      * @return True if the 'data' field has been set, false otherwise.
      */
    public boolean hasData() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'data' field and creates one if it doesn't exist yet.
     * Log-Daten vom übermittelnden System
     * @return This builder.
     */
    public net.mguenther.avrosampler.log.LogEvent.Builder getDataBuilder() {
      if (dataBuilder == null) {
        if (hasData()) {
          setDataBuilder(net.mguenther.avrosampler.log.LogEvent.newBuilder(data));
        } else {
          setDataBuilder(net.mguenther.avrosampler.log.LogEvent.newBuilder());
        }
      }
      return dataBuilder;
    }

    /**
     * Sets the Builder instance for the 'data' field
     * Log-Daten vom übermittelnden System
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public net.mguenther.avrosampler.log.LogEventRequest.Builder setDataBuilder(net.mguenther.avrosampler.log.LogEvent.Builder value) {
      clearData();
      dataBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'data' field has an active Builder instance
     * Log-Daten vom übermittelnden System
     * @return True if the 'data' field has an active Builder instance
     */
    public boolean hasDataBuilder() {
      return dataBuilder != null;
    }

    /**
      * Clears the value of the 'data' field.
      * Log-Daten vom übermittelnden System
      * @return This builder.
      */
    public net.mguenther.avrosampler.log.LogEventRequest.Builder clearData() {
      data = null;
      dataBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public LogEventRequest build() {
      try {
        LogEventRequest record = new LogEventRequest();
        record.clientId = fieldSetFlags()[0] ? this.clientId : (java.lang.String) defaultValue(fields()[0]);
        if (dataBuilder != null) {
          record.data = this.dataBuilder.build();
        } else {
          record.data = fieldSetFlags()[1] ? this.data : (net.mguenther.avrosampler.log.LogEvent) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
